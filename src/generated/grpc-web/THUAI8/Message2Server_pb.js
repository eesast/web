// source: Message2Server.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var MessageType_pb = require('./MessageType_pb.js');
goog.object.extend(proto, MessageType_pb);
goog.exportSymbol('proto.protobuf.AdditionResourceMsg', null, global);
goog.exportSymbol('proto.protobuf.AttackAdditionResourceMsg', null, global);
goog.exportSymbol('proto.protobuf.AttackConstructionMsg', null, global);
goog.exportSymbol('proto.protobuf.AttackMsg', null, global);
goog.exportSymbol('proto.protobuf.CastMsg', null, global);
goog.exportSymbol('proto.protobuf.CharacterMsg', null, global);
goog.exportSymbol('proto.protobuf.ConstructMsg', null, global);
goog.exportSymbol('proto.protobuf.ConstructTrapMsg', null, global);
goog.exportSymbol('proto.protobuf.ConstructionMsg', null, global);
goog.exportSymbol('proto.protobuf.CreatCharacterMsg', null, global);
goog.exportSymbol('proto.protobuf.EconomyResourceMsg', null, global);
goog.exportSymbol('proto.protobuf.EquipMsg', null, global);
goog.exportSymbol('proto.protobuf.IDMsg', null, global);
goog.exportSymbol('proto.protobuf.MoveMsg', null, global);
goog.exportSymbol('proto.protobuf.NullRequest', null, global);
goog.exportSymbol('proto.protobuf.RecoverMsg', null, global);
goog.exportSymbol('proto.protobuf.SendMsg', null, global);
goog.exportSymbol('proto.protobuf.SendMsg.MessageCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.NullRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.NullRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.NullRequest.displayName = 'proto.protobuf.NullRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.IDMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.IDMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.IDMsg.displayName = 'proto.protobuf.IDMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.CharacterMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.CharacterMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.CharacterMsg.displayName = 'proto.protobuf.CharacterMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.EconomyResourceMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.EconomyResourceMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.EconomyResourceMsg.displayName = 'proto.protobuf.EconomyResourceMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.AdditionResourceMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.AdditionResourceMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.AdditionResourceMsg.displayName = 'proto.protobuf.AdditionResourceMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.ConstructionMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.ConstructionMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.ConstructionMsg.displayName = 'proto.protobuf.ConstructionMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.MoveMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.MoveMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.MoveMsg.displayName = 'proto.protobuf.MoveMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.SendMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protobuf.SendMsg.oneofGroups_);
};
goog.inherits(proto.protobuf.SendMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.SendMsg.displayName = 'proto.protobuf.SendMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.AttackMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.AttackMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.AttackMsg.displayName = 'proto.protobuf.AttackMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.CastMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.CastMsg.repeatedFields_, null);
};
goog.inherits(proto.protobuf.CastMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.CastMsg.displayName = 'proto.protobuf.CastMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.AttackConstructionMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.AttackConstructionMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.AttackConstructionMsg.displayName = 'proto.protobuf.AttackConstructionMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.AttackAdditionResourceMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.AttackAdditionResourceMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.AttackAdditionResourceMsg.displayName = 'proto.protobuf.AttackAdditionResourceMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.ConstructMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.ConstructMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.ConstructMsg.displayName = 'proto.protobuf.ConstructMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.ConstructTrapMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.ConstructTrapMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.ConstructTrapMsg.displayName = 'proto.protobuf.ConstructTrapMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.EquipMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.EquipMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.EquipMsg.displayName = 'proto.protobuf.EquipMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.RecoverMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.RecoverMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.RecoverMsg.displayName = 'proto.protobuf.RecoverMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.CreatCharacterMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.CreatCharacterMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.CreatCharacterMsg.displayName = 'proto.protobuf.CreatCharacterMsg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.NullRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.NullRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.NullRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.NullRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.NullRequest}
 */
proto.protobuf.NullRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.NullRequest;
  return proto.protobuf.NullRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.NullRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.NullRequest}
 */
proto.protobuf.NullRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.NullRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.NullRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.NullRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.NullRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.IDMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.IDMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.IDMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.IDMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    teamId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.IDMsg}
 */
proto.protobuf.IDMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.IDMsg;
  return proto.protobuf.IDMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.IDMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.IDMsg}
 */
proto.protobuf.IDMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacterId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.IDMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.IDMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.IDMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.IDMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 character_id = 1;
 * @return {number}
 */
proto.protobuf.IDMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.IDMsg} returns this
 */
proto.protobuf.IDMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 team_id = 2;
 * @return {number}
 */
proto.protobuf.IDMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.IDMsg} returns this
 */
proto.protobuf.IDMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.CharacterMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.CharacterMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.CharacterMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.CharacterMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    teamId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    characterType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sideFlag: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.CharacterMsg}
 */
proto.protobuf.CharacterMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.CharacterMsg;
  return proto.protobuf.CharacterMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.CharacterMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.CharacterMsg}
 */
proto.protobuf.CharacterMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacterId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    case 3:
      var value = /** @type {!proto.protobuf.CharacterType} */ (reader.readEnum());
      msg.setCharacterType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSideFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.CharacterMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.CharacterMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.CharacterMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.CharacterMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCharacterType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSideFlag();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int64 character_id = 1;
 * @return {number}
 */
proto.protobuf.CharacterMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CharacterMsg} returns this
 */
proto.protobuf.CharacterMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 team_id = 2;
 * @return {number}
 */
proto.protobuf.CharacterMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CharacterMsg} returns this
 */
proto.protobuf.CharacterMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional CharacterType character_type = 3;
 * @return {!proto.protobuf.CharacterType}
 */
proto.protobuf.CharacterMsg.prototype.getCharacterType = function() {
  return /** @type {!proto.protobuf.CharacterType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.protobuf.CharacterType} value
 * @return {!proto.protobuf.CharacterMsg} returns this
 */
proto.protobuf.CharacterMsg.prototype.setCharacterType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 side_flag = 4;
 * @return {number}
 */
proto.protobuf.CharacterMsg.prototype.getSideFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CharacterMsg} returns this
 */
proto.protobuf.CharacterMsg.prototype.setSideFlag = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.EconomyResourceMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.EconomyResourceMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.EconomyResourceMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.EconomyResourceMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    process: jspb.Message.getFieldWithDefault(msg, 2, 0),
    economyResourceType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.EconomyResourceMsg}
 */
proto.protobuf.EconomyResourceMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.EconomyResourceMsg;
  return proto.protobuf.EconomyResourceMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.EconomyResourceMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.EconomyResourceMsg}
 */
proto.protobuf.EconomyResourceMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcess(value);
      break;
    case 3:
      var value = /** @type {!proto.protobuf.EconomyResourceType} */ (reader.readEnum());
      msg.setEconomyResourceType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.EconomyResourceMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.EconomyResourceMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.EconomyResourceMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.EconomyResourceMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getProcess();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEconomyResourceType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int64 team_id = 1;
 * @return {number}
 */
proto.protobuf.EconomyResourceMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.EconomyResourceMsg} returns this
 */
proto.protobuf.EconomyResourceMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 process = 2;
 * @return {number}
 */
proto.protobuf.EconomyResourceMsg.prototype.getProcess = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.EconomyResourceMsg} returns this
 */
proto.protobuf.EconomyResourceMsg.prototype.setProcess = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional EconomyResourceType economy_resource_type = 3;
 * @return {!proto.protobuf.EconomyResourceType}
 */
proto.protobuf.EconomyResourceMsg.prototype.getEconomyResourceType = function() {
  return /** @type {!proto.protobuf.EconomyResourceType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.protobuf.EconomyResourceType} value
 * @return {!proto.protobuf.EconomyResourceMsg} returns this
 */
proto.protobuf.EconomyResourceMsg.prototype.setEconomyResourceType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.AdditionResourceMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.AdditionResourceMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.AdditionResourceMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.AdditionResourceMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    additionResourceType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.AdditionResourceMsg}
 */
proto.protobuf.AdditionResourceMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.AdditionResourceMsg;
  return proto.protobuf.AdditionResourceMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.AdditionResourceMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.AdditionResourceMsg}
 */
proto.protobuf.AdditionResourceMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    case 3:
      var value = /** @type {!proto.protobuf.AdditionResourceType} */ (reader.readEnum());
      msg.setAdditionResourceType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.AdditionResourceMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.AdditionResourceMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.AdditionResourceMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.AdditionResourceMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAdditionResourceType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int64 team_id = 1;
 * @return {number}
 */
proto.protobuf.AdditionResourceMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.AdditionResourceMsg} returns this
 */
proto.protobuf.AdditionResourceMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 hp = 2;
 * @return {number}
 */
proto.protobuf.AdditionResourceMsg.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.AdditionResourceMsg} returns this
 */
proto.protobuf.AdditionResourceMsg.prototype.setHp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional AdditionResourceType addition_resource_type = 3;
 * @return {!proto.protobuf.AdditionResourceType}
 */
proto.protobuf.AdditionResourceMsg.prototype.getAdditionResourceType = function() {
  return /** @type {!proto.protobuf.AdditionResourceType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.protobuf.AdditionResourceType} value
 * @return {!proto.protobuf.AdditionResourceMsg} returns this
 */
proto.protobuf.AdditionResourceMsg.prototype.setAdditionResourceType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.ConstructionMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.ConstructionMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.ConstructionMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ConstructionMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    constructionType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.ConstructionMsg}
 */
proto.protobuf.ConstructionMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.ConstructionMsg;
  return proto.protobuf.ConstructionMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.ConstructionMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.ConstructionMsg}
 */
proto.protobuf.ConstructionMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHp(value);
      break;
    case 3:
      var value = /** @type {!proto.protobuf.ConstructionType} */ (reader.readEnum());
      msg.setConstructionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.ConstructionMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.ConstructionMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.ConstructionMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ConstructionMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getConstructionType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int64 team_id = 1;
 * @return {number}
 */
proto.protobuf.ConstructionMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.ConstructionMsg} returns this
 */
proto.protobuf.ConstructionMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 hp = 2;
 * @return {number}
 */
proto.protobuf.ConstructionMsg.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.ConstructionMsg} returns this
 */
proto.protobuf.ConstructionMsg.prototype.setHp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ConstructionType construction_type = 3;
 * @return {!proto.protobuf.ConstructionType}
 */
proto.protobuf.ConstructionMsg.prototype.getConstructionType = function() {
  return /** @type {!proto.protobuf.ConstructionType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.protobuf.ConstructionType} value
 * @return {!proto.protobuf.ConstructionMsg} returns this
 */
proto.protobuf.ConstructionMsg.prototype.setConstructionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.MoveMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.MoveMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.MoveMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.MoveMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    angle: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    timeInMilliseconds: jspb.Message.getFieldWithDefault(msg, 3, 0),
    teamId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.MoveMsg}
 */
proto.protobuf.MoveMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.MoveMsg;
  return proto.protobuf.MoveMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.MoveMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.MoveMsg}
 */
proto.protobuf.MoveMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacterId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAngle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeInMilliseconds(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.MoveMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.MoveMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.MoveMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.MoveMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAngle();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getTimeInMilliseconds();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 character_id = 1;
 * @return {number}
 */
proto.protobuf.MoveMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.MoveMsg} returns this
 */
proto.protobuf.MoveMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double angle = 2;
 * @return {number}
 */
proto.protobuf.MoveMsg.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.MoveMsg} returns this
 */
proto.protobuf.MoveMsg.prototype.setAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional int64 time_in_milliseconds = 3;
 * @return {number}
 */
proto.protobuf.MoveMsg.prototype.getTimeInMilliseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.MoveMsg} returns this
 */
proto.protobuf.MoveMsg.prototype.setTimeInMilliseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 team_id = 4;
 * @return {number}
 */
proto.protobuf.MoveMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.MoveMsg} returns this
 */
proto.protobuf.MoveMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protobuf.SendMsg.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.protobuf.SendMsg.MessageCase = {
  MESSAGE_NOT_SET: 0,
  TEXT_MESSAGE: 3,
  BINARY_MESSAGE: 4
};

/**
 * @return {proto.protobuf.SendMsg.MessageCase}
 */
proto.protobuf.SendMsg.prototype.getMessageCase = function() {
  return /** @type {proto.protobuf.SendMsg.MessageCase} */(jspb.Message.computeOneofCase(this, proto.protobuf.SendMsg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.SendMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.SendMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.SendMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.SendMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    toCharacterId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    textMessage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    binaryMessage: msg.getBinaryMessage_asB64(),
    teamId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.SendMsg}
 */
proto.protobuf.SendMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.SendMsg;
  return proto.protobuf.SendMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.SendMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.SendMsg}
 */
proto.protobuf.SendMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacterId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setToCharacterId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextMessage(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBinaryMessage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.SendMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.SendMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.SendMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.SendMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getToCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int64 character_id = 1;
 * @return {number}
 */
proto.protobuf.SendMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 to_character_id = 2;
 * @return {number}
 */
proto.protobuf.SendMsg.prototype.getToCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.setToCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string text_message = 3;
 * @return {string}
 */
proto.protobuf.SendMsg.prototype.getTextMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.setTextMessage = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.protobuf.SendMsg.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.clearTextMessage = function() {
  return jspb.Message.setOneofField(this, 3, proto.protobuf.SendMsg.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.SendMsg.prototype.hasTextMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes binary_message = 4;
 * @return {string}
 */
proto.protobuf.SendMsg.prototype.getBinaryMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes binary_message = 4;
 * This is a type-conversion wrapper around `getBinaryMessage()`
 * @return {string}
 */
proto.protobuf.SendMsg.prototype.getBinaryMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBinaryMessage()));
};


/**
 * optional bytes binary_message = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinaryMessage()`
 * @return {!Uint8Array}
 */
proto.protobuf.SendMsg.prototype.getBinaryMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBinaryMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.setBinaryMessage = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.protobuf.SendMsg.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.clearBinaryMessage = function() {
  return jspb.Message.setOneofField(this, 4, proto.protobuf.SendMsg.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.SendMsg.prototype.hasBinaryMessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 team_id = 5;
 * @return {number}
 */
proto.protobuf.SendMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.AttackMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.AttackMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.AttackMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.AttackMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    teamId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    attackRange: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attackedCharacterId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    attackedTeam: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.AttackMsg}
 */
proto.protobuf.AttackMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.AttackMsg;
  return proto.protobuf.AttackMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.AttackMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.AttackMsg}
 */
proto.protobuf.AttackMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacterId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackRange(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAttackedCharacterId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAttackedTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.AttackMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.AttackMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.AttackMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.AttackMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAttackRange();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAttackedCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getAttackedTeam();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int64 character_id = 1;
 * @return {number}
 */
proto.protobuf.AttackMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.AttackMsg} returns this
 */
proto.protobuf.AttackMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 team_id = 2;
 * @return {number}
 */
proto.protobuf.AttackMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.AttackMsg} returns this
 */
proto.protobuf.AttackMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 attack_range = 3;
 * @return {number}
 */
proto.protobuf.AttackMsg.prototype.getAttackRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.AttackMsg} returns this
 */
proto.protobuf.AttackMsg.prototype.setAttackRange = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 attacked_character_id = 4;
 * @return {number}
 */
proto.protobuf.AttackMsg.prototype.getAttackedCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.AttackMsg} returns this
 */
proto.protobuf.AttackMsg.prototype.setAttackedCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 attacked_team = 5;
 * @return {number}
 */
proto.protobuf.AttackMsg.prototype.getAttackedTeam = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.AttackMsg} returns this
 */
proto.protobuf.AttackMsg.prototype.setAttackedTeam = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.CastMsg.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.CastMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.CastMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.CastMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.CastMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    skillId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    castedCharacterIdList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    teamId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    attackRange: jspb.Message.getFieldWithDefault(msg, 5, 0),
    x: jspb.Message.getFieldWithDefault(msg, 6, 0),
    y: jspb.Message.getFieldWithDefault(msg, 7, 0),
    angle: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.CastMsg}
 */
proto.protobuf.CastMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.CastMsg;
  return proto.protobuf.CastMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.CastMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.CastMsg}
 */
proto.protobuf.CastMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacterId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSkillId(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCastedCharacterId(values[i]);
      }
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackRange(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.CastMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.CastMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.CastMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.CastMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSkillId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCastedCharacterIdList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getAttackRange();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional int64 character_id = 1;
 * @return {number}
 */
proto.protobuf.CastMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 skill_id = 2;
 * @return {number}
 */
proto.protobuf.CastMsg.prototype.getSkillId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.setSkillId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated int64 casted_character_id = 3;
 * @return {!Array<number>}
 */
proto.protobuf.CastMsg.prototype.getCastedCharacterIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.setCastedCharacterIdList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.addCastedCharacterId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.clearCastedCharacterIdList = function() {
  return this.setCastedCharacterIdList([]);
};


/**
 * optional int64 team_id = 4;
 * @return {number}
 */
proto.protobuf.CastMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 attack_range = 5;
 * @return {number}
 */
proto.protobuf.CastMsg.prototype.getAttackRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.setAttackRange = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 x = 6;
 * @return {number}
 */
proto.protobuf.CastMsg.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.setX = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.clearX = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.CastMsg.prototype.hasX = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 y = 7;
 * @return {number}
 */
proto.protobuf.CastMsg.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.setY = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.clearY = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.CastMsg.prototype.hasY = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double angle = 8;
 * @return {number}
 */
proto.protobuf.CastMsg.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.setAngle = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf.CastMsg} returns this
 */
proto.protobuf.CastMsg.prototype.clearAngle = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.CastMsg.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.AttackConstructionMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.AttackConstructionMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.AttackConstructionMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.AttackConstructionMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    characterId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.AttackConstructionMsg}
 */
proto.protobuf.AttackConstructionMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.AttackConstructionMsg;
  return proto.protobuf.AttackConstructionMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.AttackConstructionMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.AttackConstructionMsg}
 */
proto.protobuf.AttackConstructionMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacterId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.AttackConstructionMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.AttackConstructionMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.AttackConstructionMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.AttackConstructionMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 team_id = 1;
 * @return {number}
 */
proto.protobuf.AttackConstructionMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.AttackConstructionMsg} returns this
 */
proto.protobuf.AttackConstructionMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 character_id = 2;
 * @return {number}
 */
proto.protobuf.AttackConstructionMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.AttackConstructionMsg} returns this
 */
proto.protobuf.AttackConstructionMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.AttackAdditionResourceMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.AttackAdditionResourceMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.AttackAdditionResourceMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.AttackAdditionResourceMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    characterId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.AttackAdditionResourceMsg}
 */
proto.protobuf.AttackAdditionResourceMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.AttackAdditionResourceMsg;
  return proto.protobuf.AttackAdditionResourceMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.AttackAdditionResourceMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.AttackAdditionResourceMsg}
 */
proto.protobuf.AttackAdditionResourceMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacterId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.AttackAdditionResourceMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.AttackAdditionResourceMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.AttackAdditionResourceMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.AttackAdditionResourceMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 team_id = 1;
 * @return {number}
 */
proto.protobuf.AttackAdditionResourceMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.AttackAdditionResourceMsg} returns this
 */
proto.protobuf.AttackAdditionResourceMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 character_id = 2;
 * @return {number}
 */
proto.protobuf.AttackAdditionResourceMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.AttackAdditionResourceMsg} returns this
 */
proto.protobuf.AttackAdditionResourceMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.ConstructMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.ConstructMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.ConstructMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ConstructMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    teamId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    constructionType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.ConstructMsg}
 */
proto.protobuf.ConstructMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.ConstructMsg;
  return proto.protobuf.ConstructMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.ConstructMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.ConstructMsg}
 */
proto.protobuf.ConstructMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharacterId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamId(value);
      break;
    case 3:
      var value = /** @type {!proto.protobuf.ConstructionType} */ (reader.readEnum());
      msg.setConstructionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.ConstructMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.ConstructMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.ConstructMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ConstructMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getConstructionType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 character_id = 1;
 * @return {number}
 */
proto.protobuf.ConstructMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.ConstructMsg} returns this
 */
proto.protobuf.ConstructMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 team_id = 2;
 * @return {number}
 */
proto.protobuf.ConstructMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.ConstructMsg} returns this
 */
proto.protobuf.ConstructMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ConstructionType construction_type = 3;
 * @return {!proto.protobuf.ConstructionType}
 */
proto.protobuf.ConstructMsg.prototype.getConstructionType = function() {
  return /** @type {!proto.protobuf.ConstructionType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.protobuf.ConstructionType} value
 * @return {!proto.protobuf.ConstructMsg} returns this
 */
proto.protobuf.ConstructMsg.prototype.setConstructionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.ConstructTrapMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.ConstructTrapMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.ConstructTrapMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ConstructTrapMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    teamId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    trapType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.ConstructTrapMsg}
 */
proto.protobuf.ConstructTrapMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.ConstructTrapMsg;
  return proto.protobuf.ConstructTrapMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.ConstructTrapMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.ConstructTrapMsg}
 */
proto.protobuf.ConstructTrapMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCharacterId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTeamId(value);
      break;
    case 3:
      var value = /** @type {!proto.protobuf.TrapType} */ (reader.readEnum());
      msg.setTrapType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.ConstructTrapMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.ConstructTrapMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.ConstructTrapMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.ConstructTrapMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTrapType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 character_id = 1;
 * @return {number}
 */
proto.protobuf.ConstructTrapMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.ConstructTrapMsg} returns this
 */
proto.protobuf.ConstructTrapMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 team_id = 2;
 * @return {number}
 */
proto.protobuf.ConstructTrapMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.ConstructTrapMsg} returns this
 */
proto.protobuf.ConstructTrapMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TrapType trap_type = 3;
 * @return {!proto.protobuf.TrapType}
 */
proto.protobuf.ConstructTrapMsg.prototype.getTrapType = function() {
  return /** @type {!proto.protobuf.TrapType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.protobuf.TrapType} value
 * @return {!proto.protobuf.ConstructTrapMsg} returns this
 */
proto.protobuf.ConstructTrapMsg.prototype.setTrapType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.EquipMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.EquipMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.EquipMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.EquipMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    equipmentType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    teamId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.EquipMsg}
 */
proto.protobuf.EquipMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.EquipMsg;
  return proto.protobuf.EquipMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.EquipMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.EquipMsg}
 */
proto.protobuf.EquipMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacterId(value);
      break;
    case 2:
      var value = /** @type {!proto.protobuf.EquipmentType} */ (reader.readEnum());
      msg.setEquipmentType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.EquipMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.EquipMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.EquipMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.EquipMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEquipmentType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 character_id = 1;
 * @return {number}
 */
proto.protobuf.EquipMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.EquipMsg} returns this
 */
proto.protobuf.EquipMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EquipmentType equipment_type = 2;
 * @return {!proto.protobuf.EquipmentType}
 */
proto.protobuf.EquipMsg.prototype.getEquipmentType = function() {
  return /** @type {!proto.protobuf.EquipmentType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.protobuf.EquipmentType} value
 * @return {!proto.protobuf.EquipMsg} returns this
 */
proto.protobuf.EquipMsg.prototype.setEquipmentType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int64 team_id = 3;
 * @return {number}
 */
proto.protobuf.EquipMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.EquipMsg} returns this
 */
proto.protobuf.EquipMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.RecoverMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.RecoverMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.RecoverMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.RecoverMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    recoveredHp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    teamId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.RecoverMsg}
 */
proto.protobuf.RecoverMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.RecoverMsg;
  return proto.protobuf.RecoverMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.RecoverMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.RecoverMsg}
 */
proto.protobuf.RecoverMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacterId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecoveredHp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.RecoverMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.RecoverMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.RecoverMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.RecoverMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRecoveredHp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 character_id = 1;
 * @return {number}
 */
proto.protobuf.RecoverMsg.prototype.getCharacterId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.RecoverMsg} returns this
 */
proto.protobuf.RecoverMsg.prototype.setCharacterId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 recovered_hp = 2;
 * @return {number}
 */
proto.protobuf.RecoverMsg.prototype.getRecoveredHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.RecoverMsg} returns this
 */
proto.protobuf.RecoverMsg.prototype.setRecoveredHp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 team_id = 3;
 * @return {number}
 */
proto.protobuf.RecoverMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.RecoverMsg} returns this
 */
proto.protobuf.RecoverMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.CreatCharacterMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.CreatCharacterMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.CreatCharacterMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.CreatCharacterMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    characterType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    teamId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    birthpointIndex: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.CreatCharacterMsg}
 */
proto.protobuf.CreatCharacterMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.CreatCharacterMsg;
  return proto.protobuf.CreatCharacterMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.CreatCharacterMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.CreatCharacterMsg}
 */
proto.protobuf.CreatCharacterMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protobuf.CharacterType} */ (reader.readEnum());
      msg.setCharacterType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTeamId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBirthpointIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.CreatCharacterMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.CreatCharacterMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.CreatCharacterMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.CreatCharacterMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCharacterType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTeamId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getBirthpointIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional CharacterType character_type = 1;
 * @return {!proto.protobuf.CharacterType}
 */
proto.protobuf.CreatCharacterMsg.prototype.getCharacterType = function() {
  return /** @type {!proto.protobuf.CharacterType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.protobuf.CharacterType} value
 * @return {!proto.protobuf.CreatCharacterMsg} returns this
 */
proto.protobuf.CreatCharacterMsg.prototype.setCharacterType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 team_id = 2;
 * @return {number}
 */
proto.protobuf.CreatCharacterMsg.prototype.getTeamId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CreatCharacterMsg} returns this
 */
proto.protobuf.CreatCharacterMsg.prototype.setTeamId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 birthpoint_index = 3;
 * @return {number}
 */
proto.protobuf.CreatCharacterMsg.prototype.getBirthpointIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protobuf.CreatCharacterMsg} returns this
 */
proto.protobuf.CreatCharacterMsg.prototype.setBirthpointIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.protobuf);
