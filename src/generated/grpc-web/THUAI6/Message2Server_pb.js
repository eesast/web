// source: Message2Server.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global =
  (typeof globalThis !== "undefined" && globalThis) ||
  (typeof window !== "undefined" && window) ||
  (typeof global !== "undefined" && global) ||
  (typeof self !== "undefined" && self) ||
  function () {
    return this;
  }.call(null) ||
  Function("return this")();

var MessageType_pb = require("./MessageType_pb.js");
goog.object.extend(proto, MessageType_pb);
goog.exportSymbol("proto.protobuf.AttackMsg", null, global);
goog.exportSymbol("proto.protobuf.IDMsg", null, global);
goog.exportSymbol("proto.protobuf.MoveMsg", null, global);
goog.exportSymbol("proto.protobuf.PlayerMsg", null, global);
goog.exportSymbol("proto.protobuf.PlayerMsg.JobTypeCase", null, global);
goog.exportSymbol("proto.protobuf.PropMsg", null, global);
goog.exportSymbol("proto.protobuf.SendMsg", null, global);
goog.exportSymbol("proto.protobuf.SendMsg.MessageCase", null, global);
goog.exportSymbol("proto.protobuf.SkillMsg", null, global);
goog.exportSymbol("proto.protobuf.TreatAndRescueMsg", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.PlayerMsg = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.protobuf.PlayerMsg.oneofGroups_,
  );
};
goog.inherits(proto.protobuf.PlayerMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.PlayerMsg.displayName = "proto.protobuf.PlayerMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.MoveMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.MoveMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.MoveMsg.displayName = "proto.protobuf.MoveMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.PropMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.PropMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.PropMsg.displayName = "proto.protobuf.PropMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.SendMsg = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.protobuf.SendMsg.oneofGroups_,
  );
};
goog.inherits(proto.protobuf.SendMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.SendMsg.displayName = "proto.protobuf.SendMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.AttackMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.AttackMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.AttackMsg.displayName = "proto.protobuf.AttackMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.IDMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.IDMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.IDMsg.displayName = "proto.protobuf.IDMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.TreatAndRescueMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.TreatAndRescueMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.TreatAndRescueMsg.displayName =
    "proto.protobuf.TreatAndRescueMsg";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.SkillMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.SkillMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobuf.SkillMsg.displayName = "proto.protobuf.SkillMsg";
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protobuf.PlayerMsg.oneofGroups_ = [[2, 3]];

/**
 * @enum {number}
 */
proto.protobuf.PlayerMsg.JobTypeCase = {
  JOB_TYPE_NOT_SET: 0,
  STUDENT_TYPE: 2,
  TRICKER_TYPE: 3,
};

/**
 * @return {proto.protobuf.PlayerMsg.JobTypeCase}
 */
proto.protobuf.PlayerMsg.prototype.getJobTypeCase = function () {
  return /** @type {proto.protobuf.PlayerMsg.JobTypeCase} */ (
    jspb.Message.computeOneofCase(
      this,
      proto.protobuf.PlayerMsg.oneofGroups_[0],
    )
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protobuf.PlayerMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.protobuf.PlayerMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protobuf.PlayerMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protobuf.PlayerMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        studentType: jspb.Message.getFieldWithDefault(msg, 2, 0),
        trickerType: jspb.Message.getFieldWithDefault(msg, 3, 0),
        playerType: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.PlayerMsg}
 */
proto.protobuf.PlayerMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.PlayerMsg();
  return proto.protobuf.PlayerMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.PlayerMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.PlayerMsg}
 */
proto.protobuf.PlayerMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPlayerId(value);
        break;
      case 2:
        var value = /** @type {!proto.protobuf.StudentType} */ (
          reader.readEnum()
        );
        msg.setStudentType(value);
        break;
      case 3:
        var value = /** @type {!proto.protobuf.TrickerType} */ (
          reader.readEnum()
        );
        msg.setTrickerType(value);
        break;
      case 4:
        var value = /** @type {!proto.protobuf.PlayerType} */ (
          reader.readEnum()
        );
        msg.setPlayerType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.PlayerMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.PlayerMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.PlayerMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.PlayerMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = /** @type {!proto.protobuf.StudentType} */ (
    jspb.Message.getField(message, 2)
  );
  if (f != null) {
    writer.writeEnum(2, f);
  }
  f = /** @type {!proto.protobuf.TrickerType} */ (
    jspb.Message.getField(message, 3)
  );
  if (f != null) {
    writer.writeEnum(3, f);
  }
  f = message.getPlayerType();
  if (f !== 0.0) {
    writer.writeEnum(4, f);
  }
};

/**
 * optional int64 player_id = 1;
 * @return {number}
 */
proto.protobuf.PlayerMsg.prototype.getPlayerId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.PlayerMsg} returns this
 */
proto.protobuf.PlayerMsg.prototype.setPlayerId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional StudentType student_type = 2;
 * @return {!proto.protobuf.StudentType}
 */
proto.protobuf.PlayerMsg.prototype.getStudentType = function () {
  return /** @type {!proto.protobuf.StudentType} */ (
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};

/**
 * @param {!proto.protobuf.StudentType} value
 * @return {!proto.protobuf.PlayerMsg} returns this
 */
proto.protobuf.PlayerMsg.prototype.setStudentType = function (value) {
  return jspb.Message.setOneofField(
    this,
    2,
    proto.protobuf.PlayerMsg.oneofGroups_[0],
    value,
  );
};

/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf.PlayerMsg} returns this
 */
proto.protobuf.PlayerMsg.prototype.clearStudentType = function () {
  return jspb.Message.setOneofField(
    this,
    2,
    proto.protobuf.PlayerMsg.oneofGroups_[0],
    undefined,
  );
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.PlayerMsg.prototype.hasStudentType = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional TrickerType tricker_type = 3;
 * @return {!proto.protobuf.TrickerType}
 */
proto.protobuf.PlayerMsg.prototype.getTrickerType = function () {
  return /** @type {!proto.protobuf.TrickerType} */ (
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};

/**
 * @param {!proto.protobuf.TrickerType} value
 * @return {!proto.protobuf.PlayerMsg} returns this
 */
proto.protobuf.PlayerMsg.prototype.setTrickerType = function (value) {
  return jspb.Message.setOneofField(
    this,
    3,
    proto.protobuf.PlayerMsg.oneofGroups_[0],
    value,
  );
};

/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf.PlayerMsg} returns this
 */
proto.protobuf.PlayerMsg.prototype.clearTrickerType = function () {
  return jspb.Message.setOneofField(
    this,
    3,
    proto.protobuf.PlayerMsg.oneofGroups_[0],
    undefined,
  );
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.PlayerMsg.prototype.hasTrickerType = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional PlayerType player_type = 4;
 * @return {!proto.protobuf.PlayerType}
 */
proto.protobuf.PlayerMsg.prototype.getPlayerType = function () {
  return /** @type {!proto.protobuf.PlayerType} */ (
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};

/**
 * @param {!proto.protobuf.PlayerType} value
 * @return {!proto.protobuf.PlayerMsg} returns this
 */
proto.protobuf.PlayerMsg.prototype.setPlayerType = function (value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protobuf.MoveMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.protobuf.MoveMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protobuf.MoveMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protobuf.MoveMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        angle: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
        timeInMilliseconds: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.MoveMsg}
 */
proto.protobuf.MoveMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.MoveMsg();
  return proto.protobuf.MoveMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.MoveMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.MoveMsg}
 */
proto.protobuf.MoveMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPlayerId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setAngle(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTimeInMilliseconds(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.MoveMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.MoveMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.MoveMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.MoveMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getAngle();
  if (f !== 0.0) {
    writer.writeDouble(2, f);
  }
  f = message.getTimeInMilliseconds();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
};

/**
 * optional int64 player_id = 1;
 * @return {number}
 */
proto.protobuf.MoveMsg.prototype.getPlayerId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.MoveMsg} returns this
 */
proto.protobuf.MoveMsg.prototype.setPlayerId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional double angle = 2;
 * @return {number}
 */
proto.protobuf.MoveMsg.prototype.getAngle = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.protobuf.MoveMsg} returns this
 */
proto.protobuf.MoveMsg.prototype.setAngle = function (value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional int64 time_in_milliseconds = 3;
 * @return {number}
 */
proto.protobuf.MoveMsg.prototype.getTimeInMilliseconds = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.MoveMsg} returns this
 */
proto.protobuf.MoveMsg.prototype.setTimeInMilliseconds = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protobuf.PropMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.protobuf.PropMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protobuf.PropMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protobuf.PropMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        propType: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.PropMsg}
 */
proto.protobuf.PropMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.PropMsg();
  return proto.protobuf.PropMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.PropMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.PropMsg}
 */
proto.protobuf.PropMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPlayerId(value);
        break;
      case 2:
        var value = /** @type {!proto.protobuf.PropType} */ (reader.readEnum());
        msg.setPropType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.PropMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.PropMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.PropMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.PropMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getPropType();
  if (f !== 0.0) {
    writer.writeEnum(2, f);
  }
};

/**
 * optional int64 player_id = 1;
 * @return {number}
 */
proto.protobuf.PropMsg.prototype.getPlayerId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.PropMsg} returns this
 */
proto.protobuf.PropMsg.prototype.setPlayerId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional PropType prop_type = 2;
 * @return {!proto.protobuf.PropType}
 */
proto.protobuf.PropMsg.prototype.getPropType = function () {
  return /** @type {!proto.protobuf.PropType} */ (
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};

/**
 * @param {!proto.protobuf.PropType} value
 * @return {!proto.protobuf.PropMsg} returns this
 */
proto.protobuf.PropMsg.prototype.setPropType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protobuf.SendMsg.oneofGroups_ = [[3, 4]];

/**
 * @enum {number}
 */
proto.protobuf.SendMsg.MessageCase = {
  MESSAGE_NOT_SET: 0,
  TEXT_MESSAGE: 3,
  BINARY_MESSAGE: 4,
};

/**
 * @return {proto.protobuf.SendMsg.MessageCase}
 */
proto.protobuf.SendMsg.prototype.getMessageCase = function () {
  return /** @type {proto.protobuf.SendMsg.MessageCase} */ (
    jspb.Message.computeOneofCase(this, proto.protobuf.SendMsg.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protobuf.SendMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.protobuf.SendMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protobuf.SendMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protobuf.SendMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        toPlayerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
        textMessage: jspb.Message.getFieldWithDefault(msg, 3, ""),
        binaryMessage: msg.getBinaryMessage_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.SendMsg}
 */
proto.protobuf.SendMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.SendMsg();
  return proto.protobuf.SendMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.SendMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.SendMsg}
 */
proto.protobuf.SendMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPlayerId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setToPlayerId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTextMessage(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setBinaryMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.SendMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.SendMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.SendMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.SendMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getToPlayerId();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(3, f);
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(4, f);
  }
};

/**
 * optional int64 player_id = 1;
 * @return {number}
 */
proto.protobuf.SendMsg.prototype.getPlayerId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.setPlayerId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int64 to_player_id = 2;
 * @return {number}
 */
proto.protobuf.SendMsg.prototype.getToPlayerId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.setToPlayerId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string text_message = 3;
 * @return {string}
 */
proto.protobuf.SendMsg.prototype.getTextMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.setTextMessage = function (value) {
  return jspb.Message.setOneofField(
    this,
    3,
    proto.protobuf.SendMsg.oneofGroups_[0],
    value,
  );
};

/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.clearTextMessage = function () {
  return jspb.Message.setOneofField(
    this,
    3,
    proto.protobuf.SendMsg.oneofGroups_[0],
    undefined,
  );
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.SendMsg.prototype.hasTextMessage = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional bytes binary_message = 4;
 * @return {string}
 */
proto.protobuf.SendMsg.prototype.getBinaryMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};

/**
 * optional bytes binary_message = 4;
 * This is a type-conversion wrapper around `getBinaryMessage()`
 * @return {string}
 */
proto.protobuf.SendMsg.prototype.getBinaryMessage_asB64 = function () {
  return /** @type {string} */ (
    jspb.Message.bytesAsB64(this.getBinaryMessage())
  );
};

/**
 * optional bytes binary_message = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinaryMessage()`
 * @return {!Uint8Array}
 */
proto.protobuf.SendMsg.prototype.getBinaryMessage_asU8 = function () {
  return /** @type {!Uint8Array} */ (
    jspb.Message.bytesAsU8(this.getBinaryMessage())
  );
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.setBinaryMessage = function (value) {
  return jspb.Message.setOneofField(
    this,
    4,
    proto.protobuf.SendMsg.oneofGroups_[0],
    value,
  );
};

/**
 * Clears the field making it undefined.
 * @return {!proto.protobuf.SendMsg} returns this
 */
proto.protobuf.SendMsg.prototype.clearBinaryMessage = function () {
  return jspb.Message.setOneofField(
    this,
    4,
    proto.protobuf.SendMsg.oneofGroups_[0],
    undefined,
  );
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobuf.SendMsg.prototype.hasBinaryMessage = function () {
  return jspb.Message.getField(this, 4) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protobuf.AttackMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.protobuf.AttackMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protobuf.AttackMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protobuf.AttackMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        angle: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.AttackMsg}
 */
proto.protobuf.AttackMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.AttackMsg();
  return proto.protobuf.AttackMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.AttackMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.AttackMsg}
 */
proto.protobuf.AttackMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPlayerId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setAngle(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.AttackMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.AttackMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.AttackMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.AttackMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getAngle();
  if (f !== 0.0) {
    writer.writeDouble(2, f);
  }
};

/**
 * optional int64 player_id = 1;
 * @return {number}
 */
proto.protobuf.AttackMsg.prototype.getPlayerId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.AttackMsg} returns this
 */
proto.protobuf.AttackMsg.prototype.setPlayerId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional double angle = 2;
 * @return {number}
 */
proto.protobuf.AttackMsg.prototype.getAngle = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.protobuf.AttackMsg} returns this
 */
proto.protobuf.AttackMsg.prototype.setAngle = function (value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protobuf.IDMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.protobuf.IDMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protobuf.IDMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protobuf.IDMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.IDMsg}
 */
proto.protobuf.IDMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.IDMsg();
  return proto.protobuf.IDMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.IDMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.IDMsg}
 */
proto.protobuf.IDMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPlayerId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.IDMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.IDMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.IDMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.IDMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
};

/**
 * optional int64 player_id = 1;
 * @return {number}
 */
proto.protobuf.IDMsg.prototype.getPlayerId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.IDMsg} returns this
 */
proto.protobuf.IDMsg.prototype.setPlayerId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protobuf.TreatAndRescueMsg.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.protobuf.TreatAndRescueMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protobuf.TreatAndRescueMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protobuf.TreatAndRescueMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        toPlayerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.TreatAndRescueMsg}
 */
proto.protobuf.TreatAndRescueMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.TreatAndRescueMsg();
  return proto.protobuf.TreatAndRescueMsg.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.TreatAndRescueMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.TreatAndRescueMsg}
 */
proto.protobuf.TreatAndRescueMsg.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPlayerId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setToPlayerId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.TreatAndRescueMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.TreatAndRescueMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.TreatAndRescueMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.TreatAndRescueMsg.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getToPlayerId();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
};

/**
 * optional int64 player_id = 1;
 * @return {number}
 */
proto.protobuf.TreatAndRescueMsg.prototype.getPlayerId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.TreatAndRescueMsg} returns this
 */
proto.protobuf.TreatAndRescueMsg.prototype.setPlayerId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int64 to_player_id = 2;
 * @return {number}
 */
proto.protobuf.TreatAndRescueMsg.prototype.getToPlayerId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.TreatAndRescueMsg} returns this
 */
proto.protobuf.TreatAndRescueMsg.prototype.setToPlayerId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.protobuf.SkillMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.protobuf.SkillMsg.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.protobuf.SkillMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.protobuf.SkillMsg.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        playerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        skillId: jspb.Message.getFieldWithDefault(msg, 2, 0),
        skillParam: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.SkillMsg}
 */
proto.protobuf.SkillMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.SkillMsg();
  return proto.protobuf.SkillMsg.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.SkillMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.SkillMsg}
 */
proto.protobuf.SkillMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPlayerId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setSkillId(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setSkillParam(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.SkillMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.SkillMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.SkillMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.SkillMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getSkillId();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getSkillParam();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
};

/**
 * optional int64 player_id = 1;
 * @return {number}
 */
proto.protobuf.SkillMsg.prototype.getPlayerId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.SkillMsg} returns this
 */
proto.protobuf.SkillMsg.prototype.setPlayerId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 skill_id = 2;
 * @return {number}
 */
proto.protobuf.SkillMsg.prototype.getSkillId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.SkillMsg} returns this
 */
proto.protobuf.SkillMsg.prototype.setSkillId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 skill_param = 3;
 * @return {number}
 */
proto.protobuf.SkillMsg.prototype.getSkillParam = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.protobuf.SkillMsg} returns this
 */
proto.protobuf.SkillMsg.prototype.setSkillParam = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

goog.object.extend(exports, proto.protobuf);
