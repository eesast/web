# Universal
query GetMentorApplicationSchedule($year: Int!) {
  mentor_time_by_pk(activateIn: $year) {
    activateIn
    start_A
    start_B
    start_C
    start_D
    start_E
    end_A
    end_B
    end_C
    end_D
    end_E
  }
}
query GetMentorInfoList {
  mentor_info(order_by: { available: desc, max_applicants: desc }) {
    achievement
    available
    background
    field
    intro
    max_applicants
    mentor_uuid
    user {
      department
      email
      realname
    }
  }
}
query GetMentorApplicationsCount($uuid: uuid!, $year: Int!) {
  mentor_application_aggregate(
    where: { _and: { mentor_uuid: { _eq: $uuid }, year: { _eq: $year } } }
  ) {
    aggregate {
      count
    }
  }
}
query GetMentorApplicationsApprovedCount($uuid: uuid!, $year: Int!) {
  mentor_application_aggregate(
    where: {
      _and: {
        mentor_uuid: { _eq: $uuid }
        _and: { year: { _eq: $year }, status: { _eq: "approved" } }
      }
    }
  ) {
    aggregate {
      count
    }
  }
}

# Mentor
mutation InsertMentorInfo($mentor_uuid: uuid!) {
  insert_mentor_info_one(
    object: { mentor_uuid: $mentor_uuid }
    on_conflict: { constraint: mentor_info_pkey }
  ) {
    updated_at
  }
}
mutation UpdateMentorInfoAvailable($uuid: uuid!, $available: Boolean!) {
  update_mentor_info_by_pk(
    pk_columns: { mentor_uuid: $uuid }
    _set: { available: $available }
  ) {
    available
  }
}
mutation UpdateMentorInfoMaxApplicants($uuid: uuid!, $max_applicants: Int!) {
  update_mentor_info_by_pk(
    pk_columns: { mentor_uuid: $uuid }
    _set: { max_applicants: $max_applicants }
  ) {
    max_applicants
  }
}
mutation UpdateMentorInfoDescription(
  $mentor_uuid: uuid!
  $achievement: String = ""
  $background: String = ""
  $field: String = ""
  $intro: String = ""
) {
  update_mentor_info_by_pk(
    pk_columns: { mentor_uuid: $mentor_uuid }
    _set: {
      achievement: $achievement
      background: $background
      field: $field
      intro: $intro
    }
  ) {
    mentor_uuid
  }
}
query GetMentorApplicationsListForMentor($uuid: uuid!, $year: Int!) {
  mentor_application(
    where: { mentor_uuid: { _eq: $uuid }, year: { _eq: $year } }
    order_by: { created_at: asc }
  ) {
    id
    created_at
    updated_at
    statement
    status
    chat_status
    student_uuid
    student {
      realname
      department
      class
      email
      phone
    }
  }
}
mutation UpdateMentorApplicationStatus($id: uuid!, $status: String!) {
  update_mentor_application_by_pk(
    pk_columns: { id: $id }
    _set: { status: $status }
  ) {
    status
  }
}

# Student
mutation InsertMentorApplication(
  $mentor_uuid: uuid!
  $student_uuid: uuid!
  $year: Int!
  $statement: String = ""
) {
  insert_mentor_application_one(
    object: {
      statement: $statement
      mentor_uuid: $mentor_uuid
      student_uuid: $student_uuid
      year: $year
    }
  ) {
    id
  }
}
mutation UpdateMentorApplicationStatement($id: uuid!, $statement: String!) {
  update_mentor_application_by_pk(
    pk_columns: { id: $id }
    _set: { statement: $statement }
  ) {
    statement
  }
}
query GetMentorApplicationsListForStudent($uuid: uuid!, $year: Int!) {
  mentor_application(
    where: { student_uuid: { _eq: $uuid }, year: { _eq: $year } }
    order_by: { created_at: asc }
  ) {
    id
    created_at
    updated_at
    statement
    status
    chat_status
    mentor_uuid
    mentor {
      realname
      department
      email
    }
  }
}
mutation DeleteMentorApplication($id: uuid!) {
  delete_mentor_application_by_pk(id: $id) {
    id
  }
}
mutation UpdateMentorApplicationChatStatus($id: uuid!, $chat_status: Boolean!) {
  update_mentor_application_by_pk(
    pk_columns: { id: $id }
    _set: { chat_status: $chat_status }
  ) {
    chat_status
  }
}

# Counselor
mutation InsertMentorApplicationSchedule(
  $year: Int!
  $start_A: timestamptz!
  $start_B: timestamptz!
  $start_C: timestamptz!
  $start_D: timestamptz!
  $start_E: timestamptz!
  $end_A: timestamptz!
  $end_B: timestamptz!
  $end_C: timestamptz!
  $end_D: timestamptz!
  $end_E: timestamptz!
) {
  insert_mentor_time_one(
    object: {
      activateIn: $year
      start_A: $start_A
      start_B: $start_B
      start_C: $start_C
      start_D: $start_D
      start_E: $start_E
      end_A: $end_A
      end_B: $end_B
      end_C: $end_C
      end_D: $end_D
      end_E: $end_E
    }
    on_conflict: {
      constraint: mentor_time_pkey
      update_columns: [
        start_A
        start_B
        start_C
        start_D
        start_E
        end_A
        end_B
        end_C
        end_D
        end_E
      ]
    }
  ) {
    activateIn
  }
}
query GetMentorApplicationsListForCounselor($year: Int!) {
  mentor_application(
    where: { year: { _eq: $year } }
    order_by: { created_at: asc }
  ) {
    statement
    status
    chat_status
    student {
      realname
      student_no
      department
      class
    }
    mentor {
      realname
      department
    }
  }
}
query QueryStudentByStudentNo($student_no: String!) {
  users(where: { student_no: { _eq: $student_no } }) {
    uuid
    realname
  }
}
query QueryTeacherByRealname($realname: String!) {
  users(where: { realname: { _eq: $realname } }) {
    uuid
  }
}

query GetFreshmanInfoList($year: Int!) {
  freshman(where: { year: { _eq: $year } }, order_by: { student_no: asc }) {
    realname
    student_no
  }
}

mutation InsertFreshmanInfoList($freshmanData: [freshman_insert_input!]!) {
  insert_freshman(
    objects: $freshmanData
    on_conflict: {
      constraint: freshman_pkey
      update_columns: [realname, student_no, year, uuid]
    }
  ) {
    affected_rows
  }
}
