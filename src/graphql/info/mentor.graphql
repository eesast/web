query GetMentorApplications($uuid: uuid!) {
  mentor_application(
    where: {
      _or: [{ student_uuid: { _eq: $uuid } }, { mentor_uuid: { _eq: $uuid } }]
    }
    order_by: { created_at: asc }
  ) {
    id
    student_byuuid {
      realname
      department
      email
      phone
    }
    mentor_byuuid {
      realname
      department
      mentor_available {
        available
      }
    }
    statement
    status
    chat_status
    created_at
    updated_at
  }
}

query GetMentorApplicationsForCounselors {
  mentor_application(order_by: { created_at: asc }) {
    id
    student_byuuid {
      uuid
      realname
      class
      department
      email
      phone
    }
    mentor_byuuid {
      realname
      department
      mentor_available {
        available
      }
    }
    statement
    status
    created_at
    updated_at
  }
}

query GetMentorAvailable($uuid: uuid!) {
  mentor_available(where: { mentor_uuid: { _eq: $uuid } }) {
    available
  }
}

mutation ChangeMentorAvailable($uuid: uuid!, $available: Boolean!) {
  insert_mentor_available_one(
    object: { mentor_uuid: $uuid, available: $available }
    on_conflict: {
      constraint: mentor_available_mentor_uuid_key
      update_columns: available
    }
  ) {
    mentor_uuid
    available
  }
}

mutation UpdateMentorApplicationStatus($id: uuid!, $status: String!) {
  update_mentor_application(
    where: { id: { _eq: $id } }
    _set: { status: $status }
  ) {
    returning {
      id
    }
  }
}

mutation UpdateMentorApplicationChatStatus($id: uuid!, $chat_status: Boolean!) {
  update_mentor_application(
    where: { id: { _eq: $id } }
    _set: { chat_status: $chat_status }
  ) {
    returning {
      id
    }
  }
}

mutation AddMentorApplication(
  $student_uuid: uuid!
  $mentor_uuid: uuid!
  $statement: String!
) {
  insert_mentor_application(
    objects: {
      student_uuid: $student_uuid
      mentor_uuid: $mentor_uuid
      statement: $statement
    }
  ) {
    returning {
      id
    }
  }
}

mutation UpdateMentorApplication($id: uuid!, $statement: String!) {
  update_mentor_application(
    where: { id: { _eq: $id } }
    _set: { statement: $statement }
  ) {
    returning {
      id
    }
  }
}

mutation DeleteMentorApplication($id: uuid!) {
  delete_mentor_application_by_pk(id: $id) {
    id
  }
}

# query GetMentorList($grade_time: timestamptz!) {
#   user_by_role(role: "teacher") {
#     _id
#     name
#     department
#     user {
#       matched: mentor_applications_mentor_aggregate(
#         where: { status: { _eq: "approved" } }
#       ) {
#         aggregate {
#           count
#         }
#       }
#       total: mentor_applications_mentor_aggregate {
#         aggregate {
#           count
#         }
#       }
#       total_for_grade: mentor_applications_mentor_aggregate(
#         where: { created_at: { _gte: $grade_time } }
#       ) {
#         aggregate {
#           count
#         }
#       }
#       mentor_available {
#         available
#       }
#     }
#   }
# }

query GetMentorList($grade_time: timestamptz!) {
  users(where: { role: { _eq: "teacher" } }) {
    uuid
    realname
    department
    matched: mentor_application_as_mentor_aggregate(
      where: { status: { _eq: "approved" } }
    ) {
      aggregate {
        count
      }
    }
    total: mentor_application_as_mentor_aggregate {
      aggregate {
        count
      }
    }
    total_for_grade: mentor_application_as_mentor_aggregate(
      where: { created_at: { _gte: $grade_time } }
    ) {
      aggregate {
        count
      }
    }
    mentor_available {
      available
    }
  }
}

mutation UpsertMentorInfo(
  $achievement: String = ""
  $background: String = ""
  $field: String = ""
  $intro: String = ""
  $mentor_uuid: uuid!
) {
  insert_mentor_info_one(
    object: {
      achievement: $achievement
      background: $background
      field: $field
      intro: $intro
      mentor_uuid: $mentor_uuid
    }
    on_conflict: {
      constraint: mentor_info_pkey
      update_columns: [achievement, background, field, intro]
    }
  ) {
    mentor_uuid
  }
}

query GetMentorInfo($mentor_uuid: uuid!) {
  mentor_info_by_pk(mentor_uuid: $mentor_uuid) {
    achievement
    background
    field
    intro
    mentor_uuid
    userByMentorUuid {
      realname
      email
    }
  }
}

query GetFreshmanList {
  users(where: { student_no: { _gt: "2022999999", _lte: "2023999999" } }) {
    uuid
    student_no
    mentor_application_as_student(where: { status: { _eq: "approved" } }) {
      student_uuid
      mentor_uuid
      statement
    }
  }
}

query GetIdByName($name: String!) {
  users(where: { realname: { _eq: $name } }) {
    uuid
  }
}
