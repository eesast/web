# 查询某ID用户是否为某比赛管理员
query QueryContestManager($contest_id: uuid!, $user_id: String="") {
  contest_manager(where: {contest_id: {_eq: $contest_id}, user_id: {_eq: $user_id}}) {
    user_id
  }
}

#插入队伍信息
mutation InsertTeam(
 $team_name: String!
 $team_intro: String = ""  # 此处的intro可以为NULL
 $team_leader: String!   # team_leader的_id
 $invited_code: String!
 $contest_id: uuid!  # 比赛名称是必填的项
) {
 insert_contest_team(
   objects: {
     team_name: $team_name
     team_intro: $team_intro
     team_leader: $team_leader
     invited_code: $invited_code
     contest_id: $contest_id
   }
 ) {
   # returning {
   #   team_id
   #   team_name
   #   team_sum
   #   team_leader
   # }
   affected_rows  # 即commit
 }
}#

# 判断是否是某次比赛的leader并返回team_id#

query IsTeamLeader($_id: String!, $contest_id: uuid!) {
  contest_team(where: {team_leader_id: {_id: {_eq: $_id}}, _and: {contest_id: {_eq: $contest_id}}}) {
    team_id
  }
}
# 判断是否是member返回id
query IsTeamMember($_id: String!, $contest_id: uuid!) {
  contest_team_member(where: {user_id: {_eq: $_id}, _and: {team_as_contest_team_member: {contest_id: {_eq: $contest_id}}}}) {
    team_id
  }
}

# 借由team_id获取code的所有信息
subscription GetCodeUpdateTime($team_id: uuid!) {
 contest_code(where: {team_id: {_eq: $team_id}}) {
   code1_update_time
   code2_update_time
   code3_update_time
   code4_update_time
   code5_update_time
   code6_update_time
 }
}

subscription GetAllTeamInfo($contest_id: uuid!) {
  contest_team(where: {contest_id: {_eq: $contest_id}}) {
    team_name
    created_at
    invited_code
    member_num
    score
    status
    status2
    contest_score
    team_id
    submitted_code_num
    team_contest_id {
      contest_name
    }
    team_intro
    team_leader_id {
      _id
      class
      email
      name
      phone
    }
    contest_team_members {
      user_as_contest_team_member {
        _id
        class
        email
        name
        phone
      }
    }
  }
}

# 查询有分数的队伍的信息
query GetAllTeamInfo_score($contest_id: uuid!) {
  contest_team(where: {_and: {contest_id: {_eq: $contest_id}, score: {_is_null: false}}}) {
    team_name
    created_at
    invited_code
    member_num
    score
    status
    status2
    contest_score
    team_id
    submitted_code_num
    team_contest_id {
      contest_name
    }
    team_intro
    team_leader_id {
      _id
      class
      email
      name
      phone
    }
    contest_team_members {
      user_as_contest_team_member {
        _id
        class
        email
        name
        phone
      }
    }
  }
}


# 查询某只队伍的信息
query GetTeamInfo($contest_id: uuid!, $team_id: uuid!) {
  contest_team(where: {contest_id: {_eq: $contest_id}, , team_id: {_eq: $team_id}}) {
    team_name
    created_at
    invited_code
    member_num
    score
    status
    status2
    contest_score
    team_id
    submitted_code_num
    team_contest_id {
      contest_name
    }
    team_intro
    team_leader_id {
      _id
      class
      email
      name
      phone
    }
    contest_team_members {
      user_as_contest_team_member {
        _id
        class
        email
        name
        phone
      }
    }
  }
}

subscription GetCompileStatus($contest_id: uuid!, $team_id: uuid!) {
  contest_team(where: {contest_id: {_eq: $contest_id}, , team_id: {_eq: $team_id}}) {
    status
  }
}

#插入队员
mutation InsertTeamMember($team_id: uuid! , $user_id: String!) {
  insert_contest_team_member(objects: {team_id: $team_id, user_id: $user_id}) {
    affected_rows
  }
}

#更新队伍信息
mutation UpdateTeam($team_id: uuid!, $team_intro: String!, $team_name: String!) {
  update_contest_team(where: {team_id: {_eq: $team_id}}, _set: {team_intro: $team_intro, team_name: $team_name}) {
    affected_rows
  }
}

#根据队伍id查询所有队员信息
query GetMemberInfo($team_id: uuid!) {
  contest_team(where: {team_id: {_eq: $team_id } }) {
    team_leader_id {
      name
      id
      _id
    }
  }
  contest_team_member(where: {team_id: {_eq: $team_id } }) {
    user_as_contest_team_member {
      id
      _id
      name
    }
  }
}

#在contest_team中删除队伍
mutation DeleteTeam($team_id: uuid!) {
  delete_contest_team(where: {team_id: {_eq: $team_id}}) {
    affected_rows
  }
}
#在team_member中删除所有队员信息
mutation DeleteAllTeamMember($team_id: uuid!) {
  delete_contest_team_member(where: {team_id: {_eq: $team_id}}) {
    affected_rows
  }
}

#在team_member中删除指定队员信息
mutation DeleteTeamMember($user_id: String!, $team_id: uuid!) {
  delete_contest_team_member(where: {user_id: {_eq: $user_id}, team_id: {_eq: $team_id}}) {
    affected_rows
  }
}

# 获取所有比赛
query GetAllContest {
  contest {
    id
    contest_name
    description
    start_date
    end_date
  }
}

# 根据比赛id获取比赛信息
query GetContestInfo($contest_id: uuid!) {
  contest(where: {id: {_eq: $contest_id}}) {
    contest_name
    contest_type
    description
    start_date
    end_date
    status
  }
}


#intropage用 现在换成contest_intro了
query GetIntroContent($id: Int!) {
  article(where: { id: { _eq: $id } }) {
    content
  }
}
#updateIntro
mutation UpdateIntro($id: Int!, $content: String = "") {
  update_article(where: { id: { _eq: $id } }, _set: { content: $content }) {
    affected_rows
  }
}

# get the contest room info
subscription GetRoomInfo($contest_id: uuid!) {
  contest_room(where: {contest_id: {_eq: $contest_id}}, order_by: {created_at: desc}) {
    created_at
    result
    room_id
    status
    port
    contest_room_teams {
      contest_team {
        team_name
        team_id
      }
    }
  }
}

# 获取正在进行比赛的房间信息
query GetRoomInfo_status($contest_id: uuid!) {
  contest_room(where: {_and: {contest_id: {_eq: $contest_id}, status: {_eq: false}, port: {_is_null: false}}}) {
    room_id
    status
    created_at
  }
}

mutation InsertRoom($contest_id: uuid!, $team1_id: uuid!,$team2_id: uuid!,$created_at: timestamptz!) {
  insert_contest_room_one(object:
    {contest_id: $contest_id,
    contest_room_teams: {data: [{team_id: $team1_id},{team_id: $team2_id}]},
    created_at: $created_at
    }
  ){
    room_id
  }
}

# 删除指定对战记录
mutation DeleteRoom($room_id: uuid!) {
  delete_contest_room_team(where: {room_id: {_eq: $room_id}}) {
    affected_rows
  }
  delete_contest_room(where: {room_id: {_eq: $room_id}}) {
    affected_rows
  }
}



#上传选手代码（原有：更新，无：插入）
mutation UpsertCode1($code: String!, $update_time: timestamptz!, $team_id: uuid!, $contest_id:uuid!, $code_type: String!) {
  insert_contest_code_one(
    object: {
      code1: $code,
      code1_update_time: $update_time,
      team_id: $team_id,
      contest_id: $contest_id,
      code_type1: $code_type
    }
    on_conflict: {constraint: contest_code_pkey,
      update_columns: [code1,code1_update_time,code_type1]
    }){
    code1_update_time
  }
}

mutation UpsertCode2($code: String!, $update_time: timestamptz!, $team_id: uuid!,$contest_id: uuid!, $code_type: String!) {
  insert_contest_code_one(
    object: {
      code2: $code,
      code2_update_time: $update_time,
      team_id: $team_id,
      contest_id: $contest_id,
      code_type2: $code_type
    }
    on_conflict: {constraint: contest_code_pkey,
      update_columns: [code2,code2_update_time,code_type2]
    }){
    code2_update_time
  }
}

mutation UpsertCode3($code: String!, $update_time: timestamptz!, $team_id: uuid!,$contest_id: uuid!, $code_type: String!) {
  insert_contest_code_one(
    object: {
      code3: $code,
      code3_update_time: $update_time,
      team_id: $team_id,
      contest_id: $contest_id,
      code_type3: $code_type
    }
    on_conflict: {constraint: contest_code_pkey,
      update_columns: [code3,code3_update_time,code_type3]
    }){
    code3_update_time
  }
}

mutation UpsertCode4($code: String!, $update_time: timestamptz!, $team_id: uuid!, $contest_id: uuid!, $code_type: String!) {
  insert_contest_code_one(
    object: {
      code4: $code,
      code4_update_time: $update_time,
      team_id: $team_id,
      contest_id: $contest_id,
      code_type4: $code_type
    }
    on_conflict: {constraint: contest_code_pkey,
      update_columns: [code4,code4_update_time,code_type4]
    }){
    code4_update_time
  }
}

mutation UpsertCode5($code: String!, $update_time: timestamptz!, $team_id: uuid!, $contest_id: uuid!, $code_type: String!) {
  insert_contest_code_one(
    object: {
      code5: $code,
      code5_update_time: $update_time,
      team_id: $team_id,
      contest_id: $contest_id,
      code_type5: $code_type
    }
    on_conflict: {constraint: contest_code_pkey,
      update_columns: [code5,code5_update_time,code_type5]
    }){
    code5_update_time
  }
}

# 通过队伍名查询队伍ID
query QueryTeamID($team_name: String!, $contest_id: uuid!) {
  contest_team(where: {team_name: {_eq: $team_name}, contest_id: {_eq: $contest_id}}) {
    team_id
    status
  }
}

# 更新比赛状态
mutation UpdateContestStatus($contest_id: uuid!, $status: String!) {
  update_contest(where: {id: {_eq: $contest_id}}, _set: {status: $status}) {
    returning {
      status
    }
  }
}
